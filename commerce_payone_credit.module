<?php

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payone_credit_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_payone_credit'] = array(
    'title' => t('Payone - Credit Card'),
    'description' => t('Credit Card payment via Payone.'),
    'active' => TRUE,
    'offsite' => TRUE,
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the Payone Credit payment method.
 */
function commerce_payone_credit_default_settings() {
  return array(
    'style' => array(0 => t('Select'), 1 => t('Radio')),
    'card_types' => drupal_map_assoc(array(
      'V',
      'M',
      'A',
      'D'
    )),
    'log' => array('request' => 0, 'response' => 0),
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_payone_credit_settings_form($settings = array()) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_payone_credit_default_settings();

  $form['style'] = array(
    '#type' => 'radios',
    '#title' => t('Display style'),
    '#default_value' => 1,
    '#options' => array(0 => t('Select'), 1 => t('Radio')),
    '#default_value' => $settings['style'],
    '#description' => t(''),
  );
  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t(''),
    '#options' => array_intersect_key(commerce_payone_credit_credit_card_types(), drupal_map_assoc(array(
      'V',
      'M',
      'A',
      'D',
      'J',
      'O',
      'U',
      'C',
      'B'
    ))),
    '#default_value' => $settings['card_types'],
    '#required' => TRUE,
  );
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );
  return $form;
}

/**
 * Payment method callback: submit form.
 */
function commerce_payone_credit_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  $form['payone_credit_information'] = array(
    '#markup' => '<span class="commerce-payone-credit-info">' . t('(Continue with checkout to complete payment via Credit Card.)') . '</span>',
  );

  return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a WPS form.
 */
function commerce_payone_credit_redirect_form($form, &$form_state, $order, $payment_method) {

  $data = array(
    'mid' => variable_get('payone_merchant_id', ''),
    'portalid' => variable_get('payone_portal_id', ''),
    'aid' => variable_get('payone_sub_account_id', ''),
    'mode' => variable_get('payone_mode', 'test'),
    'request' => 'creditcardcheck',
    'responsetype' => 'REDIRECT',
    'storecarddata' => 'yes',
    'successurl' => 'http://' . $_SERVER['SERVER_NAME'] . url('payone/redirect/' . $order->order_number . '/credit/success'),
    array('external' => TRUE),
    'errorurl' => 'http://' . $_SERVER['SERVER_NAME'] . url('payone/redirect/' . $order->order_number . '/credit/error'),
    array('external' => TRUE)
  );

  $data['hash'] = md5($data['aid'] .
  $data['errorurl'] .
  $data['mid'] .
  $data['mode'] .
  $data['portalid'] .
  $data['request'] .
  $data['responsetype'] .
  $data['storecarddata'] .
  $data['successurl'] .
  variable_get('payone_key', ''));

  foreach ($data as $key => $val) {
    if ($val) {
      $form[$key] = array(
        '#type' => 'hidden',
        '#value' => $val
      );
    }
  }

  $form['#action'] = 'https://secure.pay1.de/client-api/';

  // Add the credit card types array if necessary.
  $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));
  if ($payment_method['settings']['card_types'] == 0) {
    $form['cardtype'] = array(
      '#type' => 'select',
      '#title' => t('Card type'),
      '#options' => array_intersect_key(commerce_payone_credit_credit_card_types(), drupal_map_assoc((array) $card_types)),
      '#required' => TRUE
    );
  }
  else {
    $form['cardtype'] = array(
      '#type' => 'radios',
      '#title' => t('Card type'),
      '#options' => array_intersect_key(commerce_payone_credit_credit_card_types(), drupal_map_assoc((array) $card_types)),
      '#required' => TRUE
    );
  }


  $form['cardpan'] = array(
    '#type' => 'textfield',
    '#title' => t('Credit Card No.'),
  );

  $form['cardexpiredate'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Expire Date'),
    '#description' => t('Fomat YYMM (e. g. 1302 for February 2013)'),
    '#size' => '10',
  );

  $form['cardcvc2'] = array(
    '#type' => 'textfield',
    '#title' => t('CVC Number'),
    '#size' => '10',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Verify Credit Card and process payment'),
  );

  return $form;
}

/**
 * Callback when redirect
 */
function commerce_payone_credit_redirect($order, $status) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  switch ($status) {
    case 'success':

      $profile = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);
      $billing_address = $profile->commerce_customer_address[LANGUAGE_NONE][0];
      $billing_name = _commerce_payone_format_customer_name($billing_address['name_line'], $billing_address['first_name'], $billing_address['last_name']);

      require_once(libraries_get_path('Payone') . '/Bootstrap.php');
      $boot = new Payone_Bootstrap();
      $boot->init();

      $builder = new Payone_Builder();
      $service = $builder->buildServicePaymentPreauthorize();

      $person = new Payone_Api_Request_Parameter_Authorization_PersonalData();
      $person->setLastname($billing_name['last_name']);
      $person->setFirstname($billing_name['first_name']);
      $person->setCountry('DE');

      $payment = new Payone_Api_Request_Parameter_Authorization_PaymentMethod_CreditCard;
      $payment->setPseudocardpan($_REQUEST['pseudocardpan']);

      $request = new Payone_Api_Request_Preauthorization();
      $request->setMid(variable_get('payone_merchant_id', ''));
      $request->setPortalid(variable_get('payone_portal_id', ''));
      $request->setKey(variable_get('payone_key', ''));
      $request->setMode(variable_get('payone_mode', 'test'));
      $request->setAmount($wrapper->commerce_order_total->amount->value() / 100);
      $request->setCurrency($wrapper->commerce_order_total->currency_code->value());
      $request->setAid(variable_get('payone_sub_account_id', ''));
      $request->setClearingtype('cc');
      $request->setReference($order->order_number);
      $request->setPersonalData($person);
      $request->setPayment($payment);

      $response = $service->preauthorize($request);

      if ($response->isError()) {
        $transaction = commerce_payment_transaction_new('commerce_payone_credit', $order->order_id);
        $transaction->instance_id = 0;
        $transaction->amount = $wrapper->commerce_order_total->amount->value();
        $transaction->currency_code = $wrapper->commerce_order_total->currency_code->value();
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $transaction->payload['preauthorization'] = $response->toArray();
        $transaction->remote_status = $response->getStatus();
        $transaction->message = $response->getErrorcode() . ': ' . $response->getErrormessage();
        commerce_payment_transaction_save($transaction);
      }
      if ($response->getStatus() == 'REDIRECT') {
        drupal_goto($response->getRedirecturl());
      }
      if ($response->getStatus() == 'APPROVED') {
        $transaction = commerce_payment_transaction_new('commerce_payone_credit', $order->order_id);
        $transaction->instance_id = 0;
        $transaction->amount = $wrapper->commerce_order_total->amount->value();
        $transaction->currency_code = $wrapper->commerce_order_total->currency_code->value();
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        $transaction->payload['preauthorization'] = $response->toArray();
        $transaction->remote_status = $response->getStatus();
        $transaction->remote_id = $response->getTxid();
        $transaction->message = t('Credit Card Preauthorization successfull.');
        commerce_payment_transaction_save($transaction);

        $builder = new Payone_Builder();
        $service = $builder->buildServicePaymentCapture();
        $request = new Payone_Api_Request_Capture();
        $request->setTxid($response->getTxid());
        $request->setMid(variable_get('payone_merchant_id', ''));
        $request->setPortalid(variable_get('payone_portal_id', ''));
        $request->setKey(variable_get('payone_key', ''));
        $request->setMode(variable_get('payone_mode', 'test'));
        $request->setAmount($order->commerce_order_total[LANGUAGE_NONE][0]['amount'] / 100);
        $request->setCurrency($order->commerce_order_total[LANGUAGE_NONE][0]['currency_code']);

        $response = $service->capture($request);
        if ($response->isApproved()) {
          $transaction = commerce_payone_payment_transaction_load($response->getTxid());
          $transaction->instance_id = 1;
          $transaction->message = t('The payment has initialized.');
          $transaction->payload['capture'] = $response->toArray();
          $transaction->remote_status = $response->getStatus();
          commerce_payment_transaction_save($transaction);
          commerce_payment_redirect_pane_next_page($order);
          drupal_goto('checkout/' . $order->order_id . '/payment/return');
        }
      }

      // commerce_payment_redirect_pane_next_page($order);
      // drupal_goto('checkout/' . $order->order_id . '/payment/return');
      break;

    case 'error':
      $transaction = commerce_payment_transaction_new('commerce_payone_credit', $order->order_id);
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('An error occured during payment process.');
      $transaction->amount = 0;
      commerce_payment_transaction_save($transaction);
      commerce_payment_redirect_pane_previous_page($order);
      drupal_set_message(t('An error occurred and processing of the credit card did not complete. Please check your credit card data and try again.'), 'error');
      drupal_goto('checkout/' . $order->order_id . '/payment/return');
      break;
  }

}

/**
 * Callback for transaction status
 */
function commerce_payone_credit_transaction_status($data) {
  $transaction = commerce_payone_payment_transaction_load($_REQUEST['txid']);

  if ($transaction) {
    switch ($data['txaction']) {
      case 'appointed':
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = t('The payment has initialized.');
        break;

      case 'paid':
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = t('The payment has completed.');
        break;
    }
  }

  $transaction->remote_status['txaction'];
  $transaction->payload[REQUEST_TIME] = $data;

  commerce_payment_transaction_save($transaction);
}

/**
 * Returns an associative array of credit card types.
 */
function commerce_payone_credit_credit_card_types() {
  return array(
    'V' => t('Visa'),
    'M' => t('Mastercard'),
    'A' => t('Amex'),
    'D' => t('Diners'),
    'J' => t('JCB'),
    'O' => t('Maestro International'),
    'U' => t('Maestro UK'),
    'C' => t('Discover'),
    'B' => t('Carte Bleue')
  );
}
